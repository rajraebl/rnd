<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>
<!--
  private static void CheckDoNotSendRule(Risk risk)
        {//INSPOP:New:20140903:PY : Make all the filters flag based and configurable 
            var mainDriver = risk.ContractType.PrimaryDriver;
            var secondDriver = risk.ContractType.SecondaryDriver;
            var insuredDriverType = risk.ContractType.InsuredDriverType;
            var grayCardOwner = risk.ContractType.GrayCardOwner;

            if (grayCardOwner == GrayCardOwner.MyParents || grayCardOwner == GrayCardOwner.ParentsOfSpouse_Partner || grayCardOwner == GrayCardOwner.Society || insuredDriverType == InsuredDriverType.Hidden)
                throw new RiskTransformationRejectionException("Do Not Send Rule 1 Applied -.- Gray Card Owner = " + grayCardOwner);

            var bugid19453Flag = ConfigurationManager.AppSettings["bugid19453flag"];//INSPOP:New:20150527 use PhraseBook.GetBobReferenceValue as in DA
            
            if (bugid19453Flag != "1")
            {
                if (insuredDriverType == InsuredDriverType.MyChild || insuredDriverType == InsuredDriverType.MyParents || insuredDriverType == InsuredDriverType.AnotherMemberOfFamily || insuredDriverType == InsuredDriverType.Friends || insuredDriverType == InsuredDriverType.Hidden)
                    throw new RiskTransformationRejectionException("Do Not Send Rule 2 Applied -.- insured driver type = " + insuredDriverType);
            }

            if (risk.ContractType.CarDetails.Usage == CarUsage.Hidden || risk.ContractType.CarDetails.Usage == CarUsage.Business)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 3 Applied -.- Car Usage = " + risk.ContractType.CarDetails.Usage);
            }

            var primaryDriverLicenceDate = new DateTime(mainDriver.DriverLicenceDate.Year, mainDriver.DriverLicenceDate.Month, 1);

            var secondaryDriverLicenceDate = new DateTime();

            if (secondDriver != null)
            {
                secondaryDriverLicenceDate = new DateTime(secondDriver.DriverLicenceDate.Year, secondDriver.DriverLicenceDate.Month, 1);
            }
            
            if (primaryDriverLicenceDate.AddYears(2) > risk.ContractType.PolicyDetails.NewContractStartDate)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 4 Applied -.- difference of Primary Driver Licence Date = " + primaryDriverLicenceDate + " with New Contract Start Date =" + risk.ContractType.PolicyDetails.NewContractStartDate + " is less than 2 years");
            }

            if (bugid19453Flag != "1")
            {
                if (secondDriver != null && (secondaryDriverLicenceDate.AddYears(2) > risk.ContractType.PolicyDetails.NewContractStartDate))
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 4 Applied -.- difference of Secondary Driver Licence Date = " + secondaryDriverLicenceDate + " with New Contract Start Date =" + risk.ContractType.PolicyDetails.NewContractStartDate + " is less than 2 years");
                }
            }

            if (mainDriver.LicenseCancellation == LicenseCancellationType.Hidden || mainDriver.LicenseCancellation == LicenseCancellationType.Suspended_in_less_than_5_years || mainDriver.LicenseCancellation == LicenseCancellationType.Cancelled_in_less_than_5_years || mainDriver.LicenseCancellation == LicenseCancellationType.Withdrawn_in_less_than_5_years || mainDriver.LicenseCancellation == LicenseCancellationType.Yes_But_Not_In_Last_5_years)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 5 Applied -.- Primary Driver License Cancellation = " + mainDriver.LicenseCancellation);
            }

            if (secondDriver != null && (secondDriver.LicenseCancellation == LicenseCancellationType.Hidden || secondDriver.LicenseCancellation == LicenseCancellationType.Suspended_in_less_than_5_years || secondDriver.LicenseCancellation == LicenseCancellationType.Cancelled_in_less_than_5_years || secondDriver.LicenseCancellation == LicenseCancellationType.Withdrawn_in_less_than_5_years || secondDriver.LicenseCancellation == LicenseCancellationType.Yes_But_Not_In_Last_5_years))
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 5 Applied -.- Secondary Driver License Cancellation = " + secondDriver.LicenseCancellation);
            }

            if (mainDriver.DriverAlreadyInsured == DriverAlreadyInsuredType.Hidden || mainDriver.DriverAlreadyInsured == DriverAlreadyInsuredType.Not_Insured)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 7 Applied -.- Primary Driver Already Insured Type = " + mainDriver.DriverAlreadyInsured);
            }
            if (bugid19453Flag != "1")
            {
                if (secondDriver != null && (secondDriver.DriverAlreadyInsured == DriverAlreadyInsuredType.Hidden || secondDriver.DriverAlreadyInsured == DriverAlreadyInsuredType.Not_Insured))
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 7 Applied -.- Secondary Driver Already Insured Type = " + secondDriver.DriverAlreadyInsured);
                }
            }
            if (mainDriver.DriverAlreadyInsuredPeriod != DriverAlreadyInsuredPeriod.Hidden && (mainDriver.DriverAlreadyInsuredPeriod == DriverAlreadyInsuredPeriod.LessThan1Year || mainDriver.DriverAlreadyInsuredPeriod == DriverAlreadyInsuredPeriod._1Year || mainDriver.DriverAlreadyInsuredPeriod == DriverAlreadyInsuredPeriod.NotSure))
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 8 Applied -.- Primary Driver Already Insured Period = " + mainDriver.DriverAlreadyInsuredPeriod);
            }
            if (bugid19453Flag != "1")
            {
                if (secondDriver != null && (secondDriver.DriverAlreadyInsuredPeriod != DriverAlreadyInsuredPeriod.Hidden && (secondDriver.DriverAlreadyInsuredPeriod == DriverAlreadyInsuredPeriod.LessThan1Year || secondDriver.DriverAlreadyInsuredPeriod == DriverAlreadyInsuredPeriod._1Year || secondDriver.DriverAlreadyInsuredPeriod == DriverAlreadyInsuredPeriod.NotSure)))
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 8 Applied -.- Secondary Driver Already Insured Period = " + secondDriver.DriverAlreadyInsuredPeriod);
                }
            }
            if (mainDriver.DriverAlreadyInsured == DriverAlreadyInsuredType.Insured_As_Primary_Driver || mainDriver.DriverAlreadyInsured == DriverAlreadyInsuredType.Insured_As_Secondary_Driver)
            {
                if (mainDriver.BonusMalus > 1)
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 9 Applied -.- Primary Driver BonusMalus = " + mainDriver.BonusMalus + " which is greater than 1.");
                }
                if (bugid19453Flag != "1")
                {
                    if (secondDriver != null && (secondDriver.BonusMalus > 1))
                    {
                        throw new RiskTransformationRejectionException("Do Not Send Rule 9 Applied -.- Secondary Driver BonusMalus = " + secondDriver.BonusMalus + " which is greater than 1.");
                    }
                }
                if (mainDriver.ClaimsInLast3Years > 3)
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 10 Applied -.- Primary Driver Claims In Last 3 Years = " + mainDriver.ClaimsInLast3Years + " which is greater than 3.");
                }
                if (secondDriver != null && (secondDriver.ClaimsInLast3Years > 3))
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 10 Applied -.- Secondary Driver Claims In Last 3 Years = " + secondDriver.ClaimsInLast3Years + " which is greater than 3.");
                }
                if (secondDriver != null && (secondDriver.ClaimsInLast3Years  + mainDriver.ClaimsInLast3Years) > 3)
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 10 Applied -.- Total of Primary and Secondary Drivers Claims In Last 3 Years = " + (secondDriver.ClaimsInLast3Years + mainDriver.ClaimsInLast3Years) + " which is greater than 3.");
                }

                if (mainDriver.FiredFromPolicy != FiredFromPolicyType.No && mainDriver.FiredFromPolicy != FiredFromPolicyType.Hidden)
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 12 Applied -.- Primary Driver Fired From Policy = " + mainDriver.FiredFromPolicy);
                }

                if (secondDriver != null && (secondDriver.FiredFromPolicy != FiredFromPolicyType.No && secondDriver.FiredFromPolicy != FiredFromPolicyType.Hidden))
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 12 Applied -.- Secondary Driver Fired From Policy = " + secondDriver.FiredFromPolicy);
                }

                if (risk.ContractType.PolicyDetails.NotInsuredPeriod != NotInsuredPeriod.Hidden && risk.ContractType.PolicyDetails.NotInsuredPeriod != NotInsuredPeriod.LessThan3Months)
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 13 Applied -.- Primary Driver Not Insured Period = " + risk.ContractType.PolicyDetails.NotInsuredPeriod);
                }
            }

            if (mainDriver.DrugTestPositive)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 14 Applied -.- Primary Driver Drug Test Positive = " + mainDriver.DrugTestPositive);
            }
            if (secondDriver != null && (secondDriver.DrugTestPositive))
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 14 Applied -.- Secondary Driver Drug Test Positive = " + secondDriver.DrugTestPositive);
            }

            if (mainDriver.DrunkenDrivingConviction != DrunkenDrivingConviction.Hidden && mainDriver.DrunkenDrivingConviction != DrunkenDrivingConviction.Zero)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 15 Applied -.- Primary Driver Drunken Driving Conviction = " + mainDriver.DrunkenDrivingConviction);
            }
            if (secondDriver != null && (secondDriver.DrunkenDrivingConviction != DrunkenDrivingConviction.Hidden && secondDriver.DrunkenDrivingConviction != DrunkenDrivingConviction.Zero))
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 15 Applied -.- Secondary Driver Drunken Driving Conviction = " + secondDriver.DrunkenDrivingConviction);
            }

            if (mainDriver.ConvictionType != ConvictionType.Hidden && mainDriver.ConvictionType == ConvictionType.NoConviction)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 16 Applied -.- Primary Driver Conviction Typ e= " + mainDriver.ConvictionType);
            }
            if (secondDriver != null && (secondDriver.ConvictionType != ConvictionType.Hidden && secondDriver.ConvictionType == ConvictionType.NoConviction))
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 16 Applied -.- Secondary Driver Conviction Type = " + secondDriver.ConvictionType);
            }

            if (mainDriver.HomeType != HomeType.Hidden && mainDriver.HomeType == HomeType.NotFixed)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 17 Applied -.- Primary Driver Conviction Type = " + mainDriver.HomeType);
            }
            if (bugid19453Flag != "1")
            {
                if (secondDriver != null && (secondDriver.HomeType != HomeType.Hidden && secondDriver.HomeType == HomeType.NotFixed))
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 17 Applied -.- Secondary Driver Conviction Type = " + secondDriver.HomeType);
                }
            }
            if(risk.ContractType.CarDetails.ModifiedCar == ModifiedCar.Yes)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 18 Applied -.- Modified Car = " + risk.ContractType.CarDetails.ModifiedCar);
            }

            //Filter 19
            if (mainDriver.LicenseType == LicenseType.Hidden || mainDriver.LicenseType == LicenseType.PermitInEuropeanCountry || mainDriver.LicenseType == LicenseType.PermitOutsideUE)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 19 Applied -.- Primary Driver LicenseType = " + mainDriver.LicenseType);
            }
            if (bugid19453Flag != "1")
            {
                //Filter 19
                if (secondDriver != null && (secondDriver.LicenseType == LicenseType.Hidden || secondDriver.LicenseType == LicenseType.PermitInEuropeanCountry || secondDriver.LicenseType == LicenseType.PermitOutsideUE))
                {
                    throw new RiskTransformationRejectionException("Do Not Send Rule 19 Applied -.- Secondary Driver LicenseType = " + secondDriver.LicenseType);
                }
            }
            //Filter 20
            if (mainDriver.LicenseCreditLostNo == LicenseCreditLostNo.Hidden || mainDriver.LicenseCreditLostNo == LicenseCreditLostNo.YesMoreThan6OrEqual)
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 20 Applied -.- Primary Driver License Credit Lost No = " + mainDriver.LicenseCreditLostNo);
            }

            //Filter 21
            if (risk.ContractType.PolicyDetails.CurrentInsurer != "99" && risk.ContractType.PolicyDetails.CurrentInsurer.ToLower() == "1")
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 21 Applied -.- Primary Driver Current Insurer = " + risk.ContractType.PolicyDetails.CurrentInsurer + " which is AGF - Allianz");
            }

            
            //Filter 22
            var validcontractDate = !String.IsNullOrEmpty(ConfigurationManager.AppSettings["Filter22CompareDate"]) ? ConfigurationManager.AppSettings["Filter22CompareDate"] : "0";//INSPOP:New:20150527 use PhraseBook.GetBobReferenceValue as in DA

            if (risk.ContractType.PolicyDetails.NewContractStartDate > DateTime.Today.AddDays(Convert.ToDouble(validcontractDate)))
            {
                throw new RiskTransformationRejectionException("Do Not Send Rule 22 Applied -.-New contract start date in more than " + validcontractDate + " days , New contact start date is  = " + risk.ContractType.PolicyDetails.NewContractStartDate); 
            }
        }
-->